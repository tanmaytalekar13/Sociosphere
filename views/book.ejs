<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Book Service</title>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css"
    />
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <style>
      /* Animation for queue item */
      @keyframes slideIn {
        0% {
          opacity: 0;
          transform: translateX(-100%);
        }
        100% {
          opacity: 1;
          transform: translateX(0);
        }
      }

      /* Bouncing animation for the current user (In Progress) */
      @keyframes bounce {
        0% {
          transform: translateY(0);
        }
        50% {
          transform: translateY(-10px);
        }
        100% {
          transform: translateY(0);
        }
      }

      /* Styling for the queue items */
      .queue-item {
        animation: slideIn 0.5s ease-out;
        padding: 10px 20px;
        border-radius: 8px;
        color: white;
        font-weight: bold;
        margin-right: 12px;
        display: inline-block;
        transition: transform 0.3s ease, background-color 0.3s ease;
      }

      /* Animation & Highlight for the current user */
      .current-user {
        background-color: #4caf50;
        transform: scale(1.1);
        animation: bounce 1s infinite;
      }

      /* Next user styling */
      .next-user {
        background-color: #f1c40f;
      }

      /* User in queue */
      .waiting-user {
        background-color: #3498db;
      }

      /* Container for queue */
      .queue-container {
        display: flex;
        justify-content: flex-start;
        align-items: center;
        overflow-x: auto;
        padding: 20px 0;
      }
    </style>
  </head>
  <body>
    <%- include('./partials/navNosearch'); %>
    <div class="mx-auto">

      <!-- Title -->
      <h1 class="text-3xl font-bold text-center text-indigo-600 mb-8">
        Book a Service
      </h1>

      <!-- Service Card -->
      <div
        class="max-w-4xl mx-auto bg-white shadow-lg rounded-lg p-6 transform transition-all duration-300 ease-in-out hover:shadow-xl"
      >
        <!-- Provider Info -->
        <div class="flex items-center mb-6">
          <img
            src="<%= provider.image %>"
            alt="Provider"
            class="w-20 h-20 rounded-full mr-6 shadow-lg"
          />
          <div>
            <h2 class="text-2xl font-semibold text-gray-800">
              <%= provider.name %>
            </h2>
            <p class="text-sm text-gray-600">
              <%= provider.categoryName %> - ‚Çπ<%= provider.charges %>/hour
            </p>
          </div>
        </div>

        <!-- Experience -->
        <p class="text-gray-700 mb-6 text-lg"><%=provider.experience %>+ years of experience</p>

        <!-- Available Days -->
        <div class="mb-6">
          <label class="block text-gray-700 font-medium mb-2"
            >Available Days</label
          >
          <% availableDays.forEach(day => { %>
          <h3 class="font-medium text-gray-700 text-lg">
            <%= day.day %>: <%= day.startTime %> - <%= day.endTime %>
          </h3>
          <% }) %>
        </div>

        <!-- Service Booking Form -->
        <form id="bookingForm" method="POST" class="space-y-6">
          <!-- Username Field -->
          <div>
            <label class="block text-gray-700 font-medium mb-2">User Name</label>
            <input
              type="text"
              id="userName"
              name="userName"
              value="<%= userName %>"
              readonly
              class="w-full border rounded p-3 bg-gray-100 text-gray-600 cursor-not-allowed"
            />
            <label class="text-gray-700 font-medium mb-2">Contact Number</label>
              <input
                type="text"
                id="userContact"
                name="userContact"
                value="<%= userContact %>"
                class="w-full border rounded p-3 bg-gray-100 text-gray-600 "
              />
              
              <label class="text-gray-700 font-medium mb-2">Address</label>
              <input
                type="Address"
                id="userAddress"
                name="useraddress"
                value="<%= useraddress %>"
                class="w-full border rounded p-3 bg-gray-100 text-gray-600 "
              /> 
          <!-- Service Type Buttons -->
          <div class="flex space-x-4 my-5">
            <button
              type="button"
              id="instantButton"
              class="w-full py-2 px-4 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 focus:outline-none transition duration-300"
            >
              Instant
            </button>
            <button
              type="button"
              id="scheduleButton"
              class="w-full py-2 px-4 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 focus:outline-none transition duration-300"
            >
              Schedule
            </button>
          </div>
        
          <!-- Conditional Fields for Schedule -->
          <div class="space-y-6" id="scheduleFields" style="display: none">
            <!-- Date Selector -->
            <div>
              <label class="block text-gray-700 font-medium mb-2">Select Date</label>
              <input
                type="text"
                id="datePicker"
                name="date"
                required
                class="w-full border rounded p-3"
              />
            </div>
        
           
          </div>
        
          <!-- Work Complexity -->
          <div class="mb-6">
            <label class="block text-gray-700 font-semibold text-lg mb-2">Select Work Complexity</label>
            <div class="space-y-4">
              <!-- Simple Option -->
              <div class="relative group">
                <input
                  type="radio"
                  id="simple"
                  name="complexity"
                  value="simple"
                  class="absolute opacity-0 peer"
                  required
                />
                <label
                  for="simple"
                  class="flex items-center justify-between bg-indigo-100 hover:bg-indigo-200 text-indigo-800 rounded-lg p-4 border border-indigo-300 transition-all duration-300 ease-in-out cursor-pointer peer-checked:bg-indigo-300 peer-checked:border-indigo-500 peer-checked:ring-2 peer-checked:ring-indigo-500"
                >
                  <div class="flex items-center space-x-3">
                    <span class="text-xl font-medium">ü™Ñ</span>
                    <span class="text-lg">Simple</span>
                  </div>
                  <span class="text-sm text-gray-500">0-1 hour</span>
                </label>
              </div>
        
              <!-- Moderate Option -->
              <div class="relative group">
                <input
                  type="radio"
                  id="moderate"
                  name="complexity"
                  value="moderate"
                  class="absolute opacity-0 peer"
                />
                <label
                  for="moderate"
                  class="flex items-center justify-between bg-yellow-100 hover:bg-yellow-200 text-yellow-800 rounded-lg p-4 border border-yellow-300 transition-all duration-300 ease-in-out cursor-pointer peer-checked:bg-yellow-300 peer-checked:border-yellow-500 peer-checked:ring-2 peer-checked:ring-yellow-500"
                >
                  <div class="flex items-center space-x-3">
                    <span class="text-xl font-medium">‚öôÔ∏è</span>
                    <span class="text-lg">Moderate</span>
                  </div>
                  <span class="text-sm text-gray-500">1-3 hours</span>
                </label>
              </div>
        
              <!-- Complex Option -->
              <div class="relative group">
                <input
                  type="radio"
                  id="complex"
                  name="complexity"
                  value="complex"
                  class="absolute opacity-0 peer"
                />
                <label
                  for="complex"
                  class="flex items-center justify-between bg-blue-100 hover:bg-blue-200 text-blue-800 rounded-lg p-4 border border-blue-300 transition-all duration-300 ease-in-out cursor-pointer peer-checked:bg-blue-300 peer-checked:border-blue-500 peer-checked:ring-2 peer-checked:ring-blue-500"
                >
                  <div class="flex items-center space-x-3">
                    <span class="text-xl font-medium">üõ†Ô∏è</span>
                    <span class="text-lg">Complex</span>
                  </div>
                  <span class="text-sm text-gray-500">3-5 hours</span>
                </label>
              </div>
        
              <!-- Super Complex Option -->
              <div class="relative group">
                <input
                  type="radio"
                  id="super-complex"
                  name="complexity"
                  value="super complex"
                  class="absolute opacity-0 peer"
                />
                <label
                  for="super-complex"
                  class="flex items-center justify-between bg-red-100 hover:bg-red-200 text-red-800 rounded-lg p-4 border border-red-300 transition-all duration-300 ease-in-out cursor-pointer peer-checked:bg-red-300 peer-checked:border-red-500 peer-checked:ring-2 peer-checked:ring-red-500"
                >
                  <div class="flex items-center space-x-3">
                    <span class="text-xl font-medium">üî•</span>
                    <span class="text-lg">Super Complex</span>
                  </div>
                  <span class="text-sm text-gray-500">5+ hours</span>
                </label>
              </div>
            </div>
          </div>
        
          <!-- Submit Button -->
          <input type="hidden" name="totalAmount" id="hiddenTotalAmount" value="0" />
          <input type="hidden" name="transactionId" id="transactionId">
          <button
        
          class="w-full py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 focus:outline-none transition duration-300"
          id="pay"
        
        >
          Pay ‚Çπ<span id="totalAmount">0</span>
        </button>

        </form>

      </div>
      <div class="estimated-wait-time max-w-4xl mx-auto p-6 bg-white shadow-lg rounded-lg border border-gray-200 mt-8">
        <h3 class="text-2xl font-semibold text-gray-800 mb-4">Estimated Wait Time for Your Booking</h3>
        <p class="text-lg text-gray-600">
          The estimated wait time for a new booking is approximately 
          <strong class="text-blue-600 font-bold"><%= estimatedWaitTime.toFixed(2) %></strong> hours.
        </p>
        <div class="mt-4 p-4 bg-blue-50 border-l-4 border-blue-500 text-blue-700">
          <p class="text-sm">
            Please note that this is an estimate and may vary based on current queue conditions.
          </p>
        </div>
      </div>
      <div id="estimatedWaitTimeContainer"></div> 
      <!-- Queue List -->
      <div class="queue-container mt-8 overflow-x-auto" id="instantQueue">
  <div class="flex space-x-4 pb-4">
    <% if (queueData.length > 0) { %>
      <% queueData.forEach((item, index) => { %>
        <div class="queue-card w-60 bg-white shadow-lg rounded-lg p-4
          <% if (index === 0) { %> border-4 border-blue-500 <% } else if (index === 1) { %> border-4 border-green-500 <% } else { %> border-4 border-yellow-500 <% } %>
        ">
          <div class="queue-header flex justify-between items-center mb-3">
            <h3 class="text-lg font-semibold text-gray-900"><%= item.userName %></h3>
            <span class="text-sm text-gray-600">Queue Position: <%= item.queuePosition %></span>
          </div>
          <p class="text-sm text-gray-600 mb-2">Contact: <%= item.userContact %></p>
          <p class="text-sm text-gray-600 mb-2">Complexity: 
            <% if (item.complexity === 'simple') { %>
              <span class="text-green-500 font-bold"><%= item.complexity %></span>
            <% } else if (item.complexity === 'moderate') { %>
              <span class="text-yellow-500 font-bold"><%= item.complexity %></span>
            <% } else if (item.complexity === 'complex') { %>
              <span class="text-orange-500 font-bold"><%= item.complexity %></span>
            <% } else if (item.complexity === 'super complex') { %>
              <span class="text-red-500 font-bold"><%= item.complexity %></span>
            <% } %>
          </p>
          <p class="text-sm text-gray-600">Status: 
            <% if (item.status === "pending") { %>
              <span class="text-yellow-500 font-bold"><%= item.status %></span>
            <% } else if (item.status === "confirmed") { %>
              <span class="text-blue-500 font-bold"><%= item.status %></span>
            <% } %>
          </p>
        </div>
      <% }) %>
    <% } else { %>
      <div class="w-60 bg-white shadow-lg rounded-lg p-4 text-center">
        No bookings found for this date.
      </div>
    <% } %>
  </div>
</div>

      <div id="queueInfo" class="mb-4">
        <h3>Current Queue Size: <span id="queueSize">0</span></h3>
      </div>
      <div class="queue-container mt-8 overflow-x-auto ">
        <div class="flex space-x-4 pb-4" id="queueCardsContainer">
          <!-- Queue cards will be dynamically inserted here -->
        </div>
      </div>
      
      <script>
        document.getElementById("datePicker").addEventListener("change", async function () {
      const selectedDate = this.value; // Format: YYYY-MM-DD
      const providerId = "<%= provider._id %>"; // Replace with actual provider ID from EJS
  if (selectedDate) {
    try {
      const response = await fetch(`/queue/size/${providerId}/${selectedDate}`);
      const data = await response.json();

      // Update queue size
      document.getElementById("queueSize").innerText = data.queueSize;

      // Populate estimated wait time card
      const estimatedWaitTimeContainer = document.getElementById("estimatedWaitTimeContainer");
      estimatedWaitTimeContainer.innerHTML = `
        <div class="estimated-wait-time max-w-4xl mx-auto p-6 bg-white shadow-lg rounded-lg border border-gray-200 mt-8">
          <h3 class="text-2xl font-semibold text-gray-800 mb-4">Estimated Wait Time for Your Booking</h3>
          <p class="text-lg text-gray-600">
            The estimated wait time for a new booking is approximately 
            <strong class="text-blue-600 font-bold">${data.estimatedWaitTime.toFixed(2)}</strong> hours.
          </p>
          <div class="mt-4 p-4 bg-blue-50 border-l-4 border-blue-500 text-blue-700">
            <p class="text-sm">
              Please note that this is an estimate and may vary based on current queue conditions.
            </p>
          </div>
        </div>
      `;

      // Populate queue cards
      const queueCardsContainer = document.getElementById("queueCardsContainer");
      queueCardsContainer.innerHTML = ""; // Clear previous queue cards

      if (data.queueData.length > 0) {
        data.queueData.forEach((item, index) => {
          const card = document.createElement("div");
          card.className = `queue-card w-60 bg-white shadow-lg rounded-lg p-4 ${
            index === 0 ? "border-4 border-blue-500" :
            index === 1 ? "border-4 border-green-500" :
            "border-4 border-yellow-500"
          }`;

          // Create the complexity span dynamically with JavaScript
          let complexitySpan = "";
          if (item.complexity === 'simple') {
            complexitySpan = '<span class="text-green-500 font-bold">Simple</span>';
          } else if (item.complexity === 'moderate') {
            complexitySpan = '<span class="text-yellow-500 font-bold">Moderate</span>';
          } else if (item.complexity === 'complex') {
            complexitySpan = '<span class="text-orange-500 font-bold">Complex</span>';
          } else if (item.complexity === 'super complex') {
            complexitySpan = '<span class="text-red-500 font-bold">Super Complex</span>';
          }

          // Create the status span dynamically with JavaScript
          let statusSpan = "";
          if (item.status === "pending") {
            statusSpan = '<span class="text-yellow-500 font-bold">Pending</span>';
          } else if (item.status === "confirmed") {
            statusSpan = '<span class="text-blue-500 font-bold">Confirmed</span>';
          }

          // Set the card's innerHTML
          card.innerHTML = `
            <div class="queue-header flex justify-between items-center mb-3">
              <h3 class="text-lg font-semibold text-gray-900">${item.userName}</h3>
              <span class="text-sm text-gray-600">Queue Position: ${item.queuePosition}</span>
            </div>
            <p class="text-sm text-gray-600 mb-2">Contact: ${item.userContact}</p>
            <p class="text-sm text-gray-600 mb-2">Complexity: ${complexitySpan}</p>
            <p class="text-sm text-gray-600">Status: ${statusSpan}</p>
          `;

          queueCardsContainer.appendChild(card);
        });
      } else {
        // No bookings found
        queueCardsContainer.innerHTML = `<div class="w-60 bg-white shadow-lg rounded-lg p-4 text-center">
          No bookings found for this date.
        </div>`;
      }
    } catch (error) {
      console.error("Error fetching queue data:", error);
      alert("Failed to fetch queue data");
    }
  }
});

      </script>
    </div>
<%- include('./partials/footer'); %>


<!-- WebSocket Integration -->
<script>

  // Form and button handling logic
  const form = document.getElementById('bookingForm');
  const instantButton = document.getElementById('instantButton');
  const scheduleButton = document.getElementById('scheduleButton');
  const scheduleFields = document.getElementById('scheduleFields');
  const totalAmount = document.getElementById('totalAmount');
  const complexityRadios = document.querySelectorAll('input[name="complexity"]');
  const payNowBtn = document.getElementById('pay');
  const userContact = document.getElementById('userContact');
  const hiddenTotalAmount = document.getElementById('hiddenTotalAmount');
  const unavailableDays = <%= JSON.stringify(result) %>;
  const instantQueue=document.getElementById('instantQueue');
  const queueInfo=document.getElementById('queueInfo');
  const estimatedwaittime=document.querySelector('.estimated-wait-time');
  const estimatedWaitTimeContainer = document.getElementById("estimatedWaitTimeContainer"); 
  // Set initial form action
  form.action = '/book/instant/<%= provider._id %>/<%= userId %>';
  queueInfo.style.display = 'none';
  // Event listener for Instant button
// Event listener for Instant button
// Event listener for Instant button
instantButton.addEventListener("click", function () {
  form.action = "/book/instant/<%= provider._id %>/<%= userId %>";
  scheduleFields.style.display = "none";
  queueInfo.style.display = "none";
  estimatedwaittime.style.display = "block";
  instantQueue.style.display = "block"; // Show Instant Queue
  estimatedWaitTimeContainer.style.display="none"; 
  // Clear the queue container to prevent duplicate rendering
  document.getElementById("queueCardsContainer").innerHTML = ""; 

  checkFormValidity();
});

// Event listener for Schedule button
scheduleButton.addEventListener("click", function () {
  form.action = "/book/schedule/<%= provider._id %>/<%= userId %>";
  scheduleFields.style.display = "block";
  queueInfo.style.display = "block";
  instantQueue.style.display = "none"; // Hide Instant Queue
  estimatedwaittime.style.display = "none";
  estimatedWaitTimeContainer.style.display="block";
  // Clear the queue container to prevent duplicate rendering
  document.getElementById("queueCardsContainer").innerHTML = "";

  checkFormValidity();
});




  function showSchedule(){
    form.action = '/book/schedule/<%= provider._id %>/<%= userId %>';
    scheduleFields.style.display = 'block';
    instantQueue.style.display = 'none';
    queueInfo.style.display = 'block'; 
    estimatedwaittime.style.display = 'none'; 
    checkFormValidity(); 
  }
  const today = new Date().getDay();
  if (unavailableDays.includes(today)) {
    instantButton.style.display = 'none'; // Hide Instant button
    showSchedule();
  }

  // Enable the "Pay Now" button only when necessary fields are filled
  userContact.addEventListener('input', checkFormValidity);
  complexityRadios.forEach(radio => radio.addEventListener('change', checkFormValidity));
  
  // Function to check form validity and enable the button
  function checkFormValidity() {
    const isContactValid = userContact.value.trim() !== '';
    const isComplexitySelected = Array.from(complexityRadios).some(radio => radio.checked);

    if (isContactValid && isComplexitySelected) {
      payNowBtn.disabled = false;
    } else {
      payNowBtn.disabled = true;
    }

    // Calculate and update total amount based on the selected complexity
    const complexity = getSelectedComplexity();
    const charges = <%= provider.charges %>; // Assuming provider's charges are in ‚Çπ per hour
    let total = 0;

    // Flatpickr initialization for date picker
            flatpickr("#datePicker", {
          dateFormat: "Y-m-d",
          minDate: "today",  // Minimum date is today
          disable: [
            function (date) {
              const dayOfWeek = date.getDay();
              // Disable unavailable days and today
              return unavailableDays.includes(dayOfWeek) || isToday(date);
            }
          ],
          disableMobile: true,
          onChange: function(selectedDates, dateStr, instance) {
            const selectedDate = selectedDates[0];
            const dayOfWeek = selectedDate.getDay();
          }
        });

        // Function to check if the selected date is today
        function isToday(date) {
          const today = new Date();
          return date.getDate() === today.getDate() &&
                date.getMonth() === today.getMonth() &&
                date.getFullYear() === today.getFullYear();
        }   
    // Calculate total based on complexity
    complexityRadios.forEach(radio => {
      radio.addEventListener('change', () => {
        const complexity = getSelectedComplexity();
        let total = 0;

        switch (complexity) {
          case 'simple':
            total = charges * 1; // 0-1 hour
            break;
          case 'moderate':
            total = charges * 2; // 1-3 hours
            break;
          case 'complex':
            total = charges * 3; // 3-5 hours
            break;
          case 'super complex':
            total = charges * 5; // 5+ hours
            break;
          default:
            total = 0;
        }

        totalAmount.textContent = total;
        hiddenTotalAmount.value = total;
      });
    });
  }

  // Get the selected complexity level
  function getSelectedComplexity() {
    return Array.from(complexityRadios).find(radio => radio.checked)?.value || '';
  }

  // Handle Pay Now button click event
  payNowBtn.addEventListener('click', async (e) => {
  e.preventDefault();

  // Get the total amount from the hidden input field
  const total = parseFloat(hiddenTotalAmount.value);

  // Check if the total amount is valid and greater than 0
  if (isNaN(total) || total <= 0) {
    alert('Please select a complexity level to proceed.');
    return;
  }

  try {
    // Send a POST request to create an order on the server
    const response = await fetch('/api/payment/create-order', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        amount: total * 100, // Convert amount to paise (Razorpay expects paise)
        currency: 'INR',
      }),
    });

    // Check if the response is successful and parse the JSON
    if (!response.ok) {
      throw new Error('Failed to create order. Please try again later.');
    }

    const { order } = await response.json();

    // Check if the order was successfully created
    if (order) {
      const options = {
        key: 'rzp_test_xFYeKiIzsIM3I3', // Replace with your Razorpay Key ID
        amount: order.amount, // Amount in paise
        currency: order.currency,
        name: 'Service Booking',
        description: 'Test Transaction',
        order_id: order.id,
        handler: async function (paymentResponse) {
          try {
            // Set the transaction ID in the hidden input field
            document.getElementById('transactionId').value = paymentResponse.razorpay_payment_id;

            // Send the payment response to the server for verification
            const verifyResponse = await fetch('/api/payment/verify-signature', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(paymentResponse),
            });

            // Parse the response from the server
            const result = await verifyResponse.json();

            if (result.success) {
              alert('Payment Successful!');

              // Submit the form after successful payment verification
              form.submit(); // Ensure this is the correct form reference

              // Optionally redirect to a success page
              // window.location.href = '/payment/success';
            } else {
              alert('Payment Verification Failed!');
            }
          } catch (verifyError) {
            console.error('Verification error:', verifyError);
            alert('An error occurred while verifying the payment. Please try again.');
          }
        },
        prefill: {
          name: '<%= userName %>',
          email: '<%= userEmail %>',
          contact: '<%= userContact %>',
        },
        theme: {
          color: '#3399cc',
        },
      };

      // Initialize and open the Razorpay payment modal
      const razorpay = new Razorpay(options);
      razorpay.open();
    } else {
      alert('Unable to create order. Try again later.');
    }
  } catch (error) {
    console.error('Payment request error:', error);
    alert('An error occurred while processing the payment. Please try again.');
  }
});

</script>

  </body>
  
</html>
